{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","state","wallet","type","keywords","balance","bills","registerWallet","walletInfo","ethers","Wallet","createRandom","address","connect","_this","provider","setState","mnemonic","updateBalance","payBill","name","res","prompt","isNaN","amount","parseInt","n","utils","formatBytes32String","contract","payService","then","r","console","log","alert","openWallet","fromMnemonic","e","balanceOf","toNumber","requestTopup","total","mintForUser","topupWallet","result","changeAuth","adminAuthUsers","registerAuthorisedAccount","adminRemoveUsers","unauthorise","authRegisterService","contractWithSigner","registerService","customHttpProvider","providers","JsonRpcProvider","this","ABI","Contract","abi","_this2","disabled","react_default","a","createElement","style","display","onClick","fontSize","value","onChange","target","map","x","key","_this3","_this4","_this5","className","src","logo","alt","getUserSection","getAdminSection","getAuthorisedUsers","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.c6217658.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { ethers } from \"ethers\";\nimport ABI from './Contract.abi.json';\n\nconst contractAddress = \"0x1f8e57d6262d62a5e1fc14f16a44b13e5c3e6e07\";\n\nclass App extends Component {\n  state = {\n    wallet: \"\",\n    type: \"\",\n    keywords: \"\",\n    balance: 0,\n    bills: [\"Road Tax\", \"Property Tax\"]\n  }\n\n  componentDidMount() {\n    // To connect to a custom URL:\n    let url = \"http://ethwl2ous-dns-reg1.southeastasia.cloudapp.azure.com:8540\";\n    let customHttpProvider = new ethers.providers.JsonRpcProvider(url);\n\n    this.provider = customHttpProvider;\n    console.log(ABI)\n\n    this.contract = new ethers.Contract(contractAddress, ABI.abi, this.provider);\n\n  }\n\n\n  /**\n   * Register a new wallet which generates a random wallet\n   * show the mnemonic; but seriously don't do this its the most important part of the system\n   * Should be encrypted or something\n   */\n  registerWallet = () => {\n    let walletInfo = ethers.Wallet.createRandom();\n    let wallet = walletInfo.address;\n    walletInfo = walletInfo.connect(this.provider);\n\n    this.setState({\n      walletInfo: walletInfo,\n      wallet: wallet,\n      keywords: walletInfo.mnemonic\n    })\n    this.updateBalance(wallet);\n  }\n\n  /**\n   * Pay a bill (by name)\n   * It will transfer the amount of money that the user has specified to the address\n   * that is keyed by the name supplied\n   * \n   * In our example we only have two services we can pay to\n   */\n  payBill = (name) => () => {\n    let res = +prompt(\"Pay the \" + name + \" bill; how much would you like to pay?\")\n\n    if (!res || isNaN(res)) {\n      alert(\"Invalid amount entered, not paying bill \" + name);\n      return;\n    }\n\n    \n    var amount = parseInt(res + \"\");\n\n    let n = ethers.utils.formatBytes32String(name)\n\n    let contractWithSigner = this.contract.connect(this.state.walletInfo);\n\n    contractWithSigner.payService(n, amount).then((r)=> {\n      console.log(r);\n      alert(\"Payment accepted and processed \" + name + \" - total amount \" + res)\n      this.updateBalance(this.state.wallet);\n    })\n\n    // bill pay? initialise bill payment options \n    // once bill payment accepted, refresh the balance\n  }\n\n  /**\n   * This opens the wallet\n   * Opening wallet requires proper mnemonics, which are just keywords\n   */\n  openWallet = () => {\n    try {\n      let walletInfo = ethers.Wallet.fromMnemonic(this.state.keywords);\n      \n      walletInfo = walletInfo.connect(this.provider);\n      this.setState({ walletInfo, wallet: walletInfo.address })\n      this.updateBalance(walletInfo.address);       \n    }\n    catch (e) {\n      alert(\"Invalid mnemonics, \" + this.state.keywords + \" not valid\");\n    }\n  }\n\n  /**\n   * Refresh the current account balance for the currently logged in user\n   * \n   */\n  updateBalance = (wallet) => {\n    // get balance, set value\n    if (wallet === \"\") {\n      return; // no balance on no wallet\n    }\n\n    this.contract.balanceOf(wallet).then((r)=> {\n      \n      this.setState({balance: r.toNumber()});\n    })    \n  }\n\n  /**\n   * helper method that will interact with the blockchain and actually top-up the wallet\n   */\n  requestTopup = (total) => {\n    // request topup\n\n    // this will be a service call which will eventually update our balance\n\n    let contractWithSigner = this.contract.connect(this.state.walletInfo);\n\n    contractWithSigner.mintForUser(this.state.wallet, total).then((r)=> {\n      console.log(r);\n      this.updateBalance(this.state.wallet);\n    })\n\n  }\n\n  /**\n   * Add 50 coins to the wallet; assume that the user is redirected to another \"payment gateway\" which \n   * does some magic, notifies our system; which then topup the user\n   * \n   * In reality, for our demo we just top up 50 straight off the bat; i let you choose the amount you want to\n   * top up\n   */\n  topupWallet = () => {\n    let result = +prompt(\"Please enter amount to top-up\", 50);\n    if (result < 1 || isNaN(result)) {\n      alert(\"invalid total\");\n      return;\n    }\n\n    this.requestTopup(result);\n\n  }\n\n  ///////////////////////////////////////////////////////////////////\n  // NOTE:\n  // below is not something that is important to the API services\n  ///////////////////////////////////////////////////////////////////\n\n  /**\n   * Change the auth type, either user, auth, or admin\n   */\n  changeAuth = (name) => () => {\n    this.setState({ type: name })\n  }\n\n  adminAuthUsers = () => {\n    let address = prompt(\"Please enter an address to authorise for management services\");\n       \n    let contractWithSigner = this.contract.connect(this.state.walletInfo);\n\n    contractWithSigner.registerAuthorisedAccount(address).then((r)=> {\n      alert(\"Registration Successful,\" + address + \" is now an authorised address for management services\");\n    })\n  }\n\n  adminRemoveUsers = () => {\n    let address = prompt(\"Please enter an address to remove authorisation for management services\");\n       \n    let contractWithSigner = this.contract.connect(this.state.walletInfo);\n\n    contractWithSigner.unauthorise(address).then((r)=> {\n      alert(\"Execution Successful,\" + address + \" is now an unauthorised address for management services\");\n    })\n  }\n\n  authRegisterService = (name) => () => {\n    if (this.state.wallet === \"\") {\n      return;\n    }\n\n    let address = prompt(\"Please enter an address to register as the \" + name + \" payment service\");\n\n    let contractWithSigner = this.contract.connect(this.state.walletInfo);\n\n    let n = ethers.utils.formatBytes32String(name);\n\n    contractWithSigner.registerService(address, n).then((r)=> {\n      alert(\"Registration Successful,\" + address + \" is now mapped to \" + name + \" payment service\");\n    })\n\n  }\n\n  /**\n   * Get the user section\n   * Pay bills (show grid)\n   * Topup (choose amount)\n   * Transfer (disabled for now)\n   */\n  getUserSection() {\n    let disabled = this.state.wallet && this.state.wallet !== \"\";\n    return (<div style={{ display: this.state.type === \"user\" ? \"block\" : \"none\" }}>\n      <h3>User section</h3>\n      <button onClick={this.registerWallet} disabled={disabled}>Register</button>\n      <p>\n        <span style={{ fontSize: \"12px\" }}>Open wallet by entering your mnemonic keywords</span><br />\n        <input type=\"text\" value={this.state.keywords} onChange={(e) => { this.setState({ keywords: e.target.value }) }} />\n        <button onClick={this.openWallet}>Open Wallet</button>\n      </p>\n      <span style={{ fontSize: \"12px\" }}>Pay Bills</span><br />\n      {\n        this.state.bills.map(x => {\n          return (<button key={x} disabled={!disabled} onClick={this.payBill(x)}>Pay {x}</button>)\n        })\n      }\n      <br />\n      <span style={{ fontSize: \"12px\" }}>Account Services</span><br />\n      <button onClick={this.topupWallet} disabled={!disabled}>Topup</button>\n      <button disabled>Transfer</button>\n    </div>)\n  }\n\n  /**\n   * Get the admin section \n   * Admin section is for registering authorised users to manage the system\n   * as well as remove unauthorised users\n   * You can probably ignore this, i use it for setting up and controlling the system parameters\n   */\n  getAdminSection() {\n    return (<div style={{ display: this.state.type === \"admin\" ? \"block\" : \"none\" }}>\n      <h3>Admin section</h3>\n      <p>\n        <span style={{ fontSize: \"12px\" }}>Open wallet by entering your mnemonic keywords</span><br />\n        <input type=\"text\" value={this.state.keywords} onChange={(e) => { this.setState({ keywords: e.target.value }) }} />\n        <button onClick={this.openWallet}>Open Wallet</button>\n      </p>\n      <button onClick={this.adminAuthUsers}>Assign authorised users</button>\n      <button onClick={this.adminRemoveUsers}>Unauthorise users</button>\n    </div>)\n  }\n\n  /**\n   * auth section is used to set up the addresses which can accept bill payments\n   * You can probably ignore this as well since its an admin function i use to configure the system\n   */\n  getAuthorisedUsers() {\n    return (<div style={{ display: this.state.type === \"auth\" ? \"block\" : \"none\" }}>\n      <h3>Authorised section</h3>\n      <p>\n        <span style={{ fontSize: \"12px\" }}>Open wallet by entering your mnemonic keywords</span><br />\n        <input type=\"text\" value={this.state.keywords} onChange={(e) => { this.setState({ keywords: e.target.value }) }} />\n        <button onClick={this.openWallet}>Open Wallet</button>\n      </p>\n      <button onClick={this.authRegisterService(\"Road Tax\")}>Register Road Tax Payment Service</button>\n      <button onClick={this.authRegisterService(\"Property Tax\")}>Register Property Tax Payment Service</button>\n\n    </div>);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n          <p>\n            Welcome to RZlytics Wallet Sample<br />\n            <button onClick={this.changeAuth(\"user\")}>User</button>\n            <button onClick={this.changeAuth(\"admin\")}>Admin</button>\n            <button onClick={this.changeAuth(\"auth\")}>Authorised</button>\n          </p>\n          <div style={{ display: this.state.type !== \"\" ? \"block\" : \"none\" }}>\n            <span>Your wallet is {this.state.wallet} - {this.state.type}, Balance is {this.state.balance}</span>\n            <button onClick={()=>{this.updateBalance(this.state.wallet)}}>Refresh</button>\n          </div>\n          {this.getUserSection()}\n          {this.getAdminSection()}\n          {this.getAuthorisedUsers()}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}